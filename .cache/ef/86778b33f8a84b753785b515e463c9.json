{"id":"../node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js","dependencies":[{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/package.json","includedInParent":true,"mtime":1558207228801},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/.babelrc","includedInParent":true,"mtime":1558125306084},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/package.json","includedInParent":true,"mtime":1558115368933},{"name":"@babel/runtime/helpers/objectSpread","loc":{"line":1,"column":25},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/@babel/runtime/helpers/objectSpread.js"},{"name":"@babel/runtime/helpers/objectWithoutProperties","loc":{"line":1,"column":99},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/@babel/runtime/helpers/objectWithoutProperties.js"},{"name":"ramda","loc":{"line":1,"column":180},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/ramda/es/index.js"},{"name":"./unknown","loc":{"line":1,"column":212},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/rules.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/tokenize/unknown.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rules = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _ramda = require(\"ramda\");\n\nvar _unknown = require(\"./unknown\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar transformKeyToRegExp = function transformKeyToRegExp(_ref) {\n  var key = _ref.key,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"key\"]);\n  return (0, _objectSpread2.default)({\n    key: new RegExp(key, 'g')\n  }, rest);\n};\n\nvar rules = (0, _ramda.pipe)((0, _ramda.prop)('rules'), (0, _ramda.append)(_unknown.UNKNOWN_RULE), (0, _ramda.map)(transformKeyToRegExp));\nexports.rules = rules;"},"sourceMaps":{"js":{"mappings":[{"source":"rules.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":12,"column":0}},{"source":"rules.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":14,"column":0}},{"source":"rules.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":18,"column":0}},{"source":"rules.ts","name":"transformKeyToRegExp","original":{"line":6,"column":6},"generated":{"line":18,"column":4}},{"source":"rules.ts","name":null,"original":{"line":6,"column":26},"generated":{"line":18,"column":24}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":18,"column":27}},{"source":"rules.ts","name":"transformKeyToRegExp","original":{"line":6,"column":6},"generated":{"line":18,"column":36}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":18,"column":56}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":18,"column":57}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":18,"column":61}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":18,"column":63}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":19,"column":0}},{"source":"rules.ts","name":"key","original":{"line":6,"column":31},"generated":{"line":19,"column":6}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":19,"column":9}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":19,"column":12}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":19,"column":16}},{"source":"rules.ts","name":"key","original":{"line":6,"column":31},"generated":{"line":19,"column":17}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":19,"column":20}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":0}},{"source":"rules.ts","name":"rest","original":{"line":6,"column":39},"generated":{"line":20,"column":6}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":10}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":13}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":52}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":56}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":58}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":59}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":64}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":65}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":20,"column":66}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":21,"column":0}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":21,"column":9}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":21,"column":37}},{"source":"rules.ts","name":"key","original":{"line":7,"column":1},"generated":{"line":22,"column":0}},{"source":"rules.ts","name":"key","original":{"line":7,"column":1},"generated":{"line":22,"column":4}},{"source":"rules.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":22,"column":7}},{"source":"rules.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":22,"column":9}},{"source":"rules.ts","name":"RegExp","original":{"line":7,"column":10},"generated":{"line":22,"column":13}},{"source":"rules.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":22,"column":19}},{"source":"rules.ts","name":"key","original":{"line":7,"column":17},"generated":{"line":22,"column":20}},{"source":"rules.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":22,"column":23}},{"source":"rules.ts","name":null,"original":{"line":7,"column":22},"generated":{"line":22,"column":25}},{"source":"rules.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":22,"column":28}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":23,"column":0}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":23,"column":3}},{"source":"rules.ts","name":"rest","original":{"line":8,"column":4},"generated":{"line":23,"column":5}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":23,"column":9}},{"source":"rules.ts","name":null,"original":{"line":6,"column":29},"generated":{"line":23,"column":10}},{"source":"rules.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":24,"column":0}},{"source":"rules.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":24,"column":1}},{"source":"rules.ts","name":null,"original":{"line":11,"column":7},"generated":{"line":26,"column":0}},{"source":"rules.ts","name":"rules","original":{"line":11,"column":13},"generated":{"line":26,"column":4}},{"source":"rules.ts","name":null,"original":{"line":11,"column":18},"generated":{"line":26,"column":9}},{"source":"rules.ts","name":"pipe","original":{"line":11,"column":21},"generated":{"line":26,"column":12}},{"source":"rules.ts","name":"prop","original":{"line":12,"column":1},"generated":{"line":26,"column":29}},{"source":"rules.ts","name":null,"original":{"line":12,"column":6},"generated":{"line":26,"column":46}},{"source":"rules.ts","name":"prop","original":{"line":12,"column":1},"generated":{"line":26,"column":53}},{"source":"rules.ts","name":"pipe","original":{"line":11,"column":21},"generated":{"line":26,"column":54}},{"source":"rules.ts","name":"append","original":{"line":14,"column":1},"generated":{"line":26,"column":56}},{"source":"rules.ts","name":"UNKNOWN_RULE","original":{"line":14,"column":8},"generated":{"line":26,"column":75}},{"source":"rules.ts","name":"append","original":{"line":14,"column":1},"generated":{"line":26,"column":96}},{"source":"rules.ts","name":"pipe","original":{"line":11,"column":21},"generated":{"line":26,"column":97}},{"source":"rules.ts","name":"map","original":{"line":15,"column":1},"generated":{"line":26,"column":99}},{"source":"rules.ts","name":"transformKeyToRegExp","original":{"line":15,"column":5},"generated":{"line":26,"column":115}},{"source":"rules.ts","name":"map","original":{"line":15,"column":1},"generated":{"line":26,"column":135}},{"source":"rules.ts","name":"pipe","original":{"line":11,"column":21},"generated":{"line":26,"column":136}},{"source":"rules.ts","name":null,"original":{"line":11,"column":7},"generated":{"line":26,"column":137}}],"sources":{"rules.ts":"import {pipe, prop, append, map} from 'ramda';\n\nimport {UNKNOWN_RULE} from './unknown';\nimport {RuleWrapper} from '../config';\n\nconst transformKeyToRegExp = ({key, ...rest}: RuleWrapper) => ({\n\tkey: new RegExp(key, 'g'),\n\t...rest\n});\n\nexport const rules = pipe(\n\tprop('rules'),\n\t// @ts-ignore\n\tappend(UNKNOWN_RULE),\n\tmap(transformKeyToRegExp)\n);\n"},"lineCount":null}},"error":null,"hash":"f073a93c52bd187ebad736ce9a28c736","cacheData":{"env":{}}}