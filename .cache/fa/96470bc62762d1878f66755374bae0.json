{"id":"../node_modules/reanimated-formula/dist/module/simple-math-ast/queries.js","dependencies":[{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/queries.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/package.json","includedInParent":true,"mtime":1558207228801},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/.babelrc","includedInParent":true,"mtime":1558125306084},{"name":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/package.json","includedInParent":true,"mtime":1558115368933},{"name":"ramda","loc":{"line":1,"column":28},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/queries.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/ramda/es/index.js"},{"name":"./types","loc":{"line":1,"column":57},"parent":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/queries.js","resolved":"/Users/ravipiyush/opensource/babel-plugin-reanimated-formula/node_modules/reanimated-formula/dist/module/simple-math-ast/types.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isRightParenthesis = exports.isLeftParenthesis = exports.isNamedFunction = exports.isOperator = exports.isVariable = exports.isConstant = exports.isNumber = void 0;\n\nvar _ramda = require(\"ramda\");\n\nvar _types = _interopRequireDefault(require(\"./types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isType = function isType(type) {\n  return (0, _ramda.pipe)((0, _ramda.prop)('type'), (0, _ramda.equals)(type));\n};\n\nvar isNumber = isType(_types.default.NUMBER);\nexports.isNumber = isNumber;\nvar isConstant = isType(_types.default.CONSTANT);\nexports.isConstant = isConstant;\nvar isVariable = isType(_types.default.VARIABLE);\nexports.isVariable = isVariable;\nvar isOperator = isType(_types.default.OPERATOR);\nexports.isOperator = isOperator;\nvar isNamedFunction = isType(_types.default.NAMED_FUNCTION);\nexports.isNamedFunction = isNamedFunction;\nvar isLeftParenthesis = isType(_types.default.LEFT_PARENTHESIS);\nexports.isLeftParenthesis = isLeftParenthesis;\nvar isRightParenthesis = isType(_types.default.RIGHT_PARENTHESIS);\nexports.isRightParenthesis = isRightParenthesis;"},"sourceMaps":{"js":{"mappings":[{"source":"queries.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"queries.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"queries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":0}},{"source":"queries.ts","name":"isType","original":{"line":5,"column":6},"generated":{"line":14,"column":4}},{"source":"queries.ts","name":null,"original":{"line":5,"column":12},"generated":{"line":14,"column":10}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":14,"column":13}},{"source":"queries.ts","name":"isType","original":{"line":5,"column":6},"generated":{"line":14,"column":22}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":14,"column":28}},{"source":"queries.ts","name":"type","original":{"line":5,"column":16},"generated":{"line":14,"column":29}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":14,"column":33}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":14,"column":35}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":15,"column":0}},{"source":"queries.ts","name":"pipe","original":{"line":6,"column":1},"generated":{"line":15,"column":9}},{"source":"queries.ts","name":"prop","original":{"line":8,"column":2},"generated":{"line":15,"column":26}},{"source":"queries.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":15,"column":43}},{"source":"queries.ts","name":"prop","original":{"line":8,"column":2},"generated":{"line":15,"column":49}},{"source":"queries.ts","name":"pipe","original":{"line":6,"column":1},"generated":{"line":15,"column":50}},{"source":"queries.ts","name":"equals","original":{"line":9,"column":2},"generated":{"line":15,"column":52}},{"source":"queries.ts","name":"type","original":{"line":9,"column":9},"generated":{"line":15,"column":71}},{"source":"queries.ts","name":"equals","original":{"line":9,"column":2},"generated":{"line":15,"column":75}},{"source":"queries.ts","name":"pipe","original":{"line":6,"column":1},"generated":{"line":15,"column":76}},{"source":"queries.ts","name":null,"original":{"line":5,"column":15},"generated":{"line":15,"column":77}},{"source":"queries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":16,"column":0}},{"source":"queries.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":16,"column":1}},{"source":"queries.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":18,"column":0}},{"source":"queries.ts","name":"isNumber","original":{"line":12,"column":13},"generated":{"line":18,"column":4}},{"source":"queries.ts","name":null,"original":{"line":12,"column":21},"generated":{"line":18,"column":12}},{"source":"queries.ts","name":"isType","original":{"line":12,"column":24},"generated":{"line":18,"column":15}},{"source":"queries.ts","name":null,"original":{"line":12,"column":30},"generated":{"line":18,"column":21}},{"source":"queries.ts","name":"TokenType","original":{"line":12,"column":31},"generated":{"line":18,"column":22}},{"source":"queries.ts","name":"NUMBER","original":{"line":12,"column":41},"generated":{"line":18,"column":37}},{"source":"queries.ts","name":null,"original":{"line":12,"column":30},"generated":{"line":18,"column":43}},{"source":"queries.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":18,"column":44}},{"source":"queries.ts","name":null,"original":{"line":13,"column":7},"generated":{"line":20,"column":0}},{"source":"queries.ts","name":"isConstant","original":{"line":13,"column":13},"generated":{"line":20,"column":4}},{"source":"queries.ts","name":null,"original":{"line":13,"column":23},"generated":{"line":20,"column":14}},{"source":"queries.ts","name":"isType","original":{"line":13,"column":26},"generated":{"line":20,"column":17}},{"source":"queries.ts","name":null,"original":{"line":13,"column":32},"generated":{"line":20,"column":23}},{"source":"queries.ts","name":"TokenType","original":{"line":13,"column":33},"generated":{"line":20,"column":24}},{"source":"queries.ts","name":"CONSTANT","original":{"line":13,"column":43},"generated":{"line":20,"column":39}},{"source":"queries.ts","name":null,"original":{"line":13,"column":32},"generated":{"line":20,"column":47}},{"source":"queries.ts","name":null,"original":{"line":13,"column":7},"generated":{"line":20,"column":48}},{"source":"queries.ts","name":null,"original":{"line":14,"column":7},"generated":{"line":22,"column":0}},{"source":"queries.ts","name":"isVariable","original":{"line":14,"column":13},"generated":{"line":22,"column":4}},{"source":"queries.ts","name":null,"original":{"line":14,"column":23},"generated":{"line":22,"column":14}},{"source":"queries.ts","name":"isType","original":{"line":14,"column":26},"generated":{"line":22,"column":17}},{"source":"queries.ts","name":null,"original":{"line":14,"column":32},"generated":{"line":22,"column":23}},{"source":"queries.ts","name":"TokenType","original":{"line":14,"column":33},"generated":{"line":22,"column":24}},{"source":"queries.ts","name":"VARIABLE","original":{"line":14,"column":43},"generated":{"line":22,"column":39}},{"source":"queries.ts","name":null,"original":{"line":14,"column":32},"generated":{"line":22,"column":47}},{"source":"queries.ts","name":null,"original":{"line":14,"column":7},"generated":{"line":22,"column":48}},{"source":"queries.ts","name":null,"original":{"line":15,"column":7},"generated":{"line":24,"column":0}},{"source":"queries.ts","name":"isOperator","original":{"line":15,"column":13},"generated":{"line":24,"column":4}},{"source":"queries.ts","name":null,"original":{"line":15,"column":23},"generated":{"line":24,"column":14}},{"source":"queries.ts","name":"isType","original":{"line":15,"column":26},"generated":{"line":24,"column":17}},{"source":"queries.ts","name":null,"original":{"line":15,"column":32},"generated":{"line":24,"column":23}},{"source":"queries.ts","name":"TokenType","original":{"line":15,"column":33},"generated":{"line":24,"column":24}},{"source":"queries.ts","name":"OPERATOR","original":{"line":15,"column":43},"generated":{"line":24,"column":39}},{"source":"queries.ts","name":null,"original":{"line":15,"column":32},"generated":{"line":24,"column":47}},{"source":"queries.ts","name":null,"original":{"line":15,"column":7},"generated":{"line":24,"column":48}},{"source":"queries.ts","name":null,"original":{"line":16,"column":7},"generated":{"line":26,"column":0}},{"source":"queries.ts","name":"isNamedFunction","original":{"line":16,"column":13},"generated":{"line":26,"column":4}},{"source":"queries.ts","name":null,"original":{"line":16,"column":28},"generated":{"line":26,"column":19}},{"source":"queries.ts","name":"isType","original":{"line":16,"column":31},"generated":{"line":26,"column":22}},{"source":"queries.ts","name":null,"original":{"line":16,"column":37},"generated":{"line":26,"column":28}},{"source":"queries.ts","name":"TokenType","original":{"line":16,"column":38},"generated":{"line":26,"column":29}},{"source":"queries.ts","name":"NAMED_FUNCTION","original":{"line":16,"column":48},"generated":{"line":26,"column":44}},{"source":"queries.ts","name":null,"original":{"line":16,"column":37},"generated":{"line":26,"column":58}},{"source":"queries.ts","name":null,"original":{"line":16,"column":7},"generated":{"line":26,"column":59}},{"source":"queries.ts","name":null,"original":{"line":17,"column":7},"generated":{"line":28,"column":0}},{"source":"queries.ts","name":"isLeftParenthesis","original":{"line":17,"column":13},"generated":{"line":28,"column":4}},{"source":"queries.ts","name":null,"original":{"line":17,"column":30},"generated":{"line":28,"column":21}},{"source":"queries.ts","name":"isType","original":{"line":17,"column":33},"generated":{"line":28,"column":24}},{"source":"queries.ts","name":null,"original":{"line":17,"column":39},"generated":{"line":28,"column":30}},{"source":"queries.ts","name":"TokenType","original":{"line":17,"column":40},"generated":{"line":28,"column":31}},{"source":"queries.ts","name":"LEFT_PARENTHESIS","original":{"line":17,"column":50},"generated":{"line":28,"column":46}},{"source":"queries.ts","name":null,"original":{"line":17,"column":39},"generated":{"line":28,"column":62}},{"source":"queries.ts","name":null,"original":{"line":17,"column":7},"generated":{"line":28,"column":63}},{"source":"queries.ts","name":null,"original":{"line":18,"column":7},"generated":{"line":30,"column":0}},{"source":"queries.ts","name":"isRightParenthesis","original":{"line":18,"column":13},"generated":{"line":30,"column":4}},{"source":"queries.ts","name":null,"original":{"line":18,"column":31},"generated":{"line":30,"column":22}},{"source":"queries.ts","name":"isType","original":{"line":18,"column":34},"generated":{"line":30,"column":25}},{"source":"queries.ts","name":null,"original":{"line":18,"column":40},"generated":{"line":30,"column":31}},{"source":"queries.ts","name":"TokenType","original":{"line":18,"column":41},"generated":{"line":30,"column":32}},{"source":"queries.ts","name":"RIGHT_PARENTHESIS","original":{"line":18,"column":51},"generated":{"line":30,"column":47}},{"source":"queries.ts","name":null,"original":{"line":18,"column":40},"generated":{"line":30,"column":64}},{"source":"queries.ts","name":null,"original":{"line":18,"column":7},"generated":{"line":30,"column":65}}],"sources":{"queries.ts":"import {pipe, prop, equals} from 'ramda';\n\nimport TokenType from './types';\n\nconst isType = (type: TokenType) =>\n\tpipe(\n\t\t// @ts-ignore\n\t\tprop('type'),\n\t\tequals(type)\n\t);\n\nexport const isNumber = isType(TokenType.NUMBER);\nexport const isConstant = isType(TokenType.CONSTANT);\nexport const isVariable = isType(TokenType.VARIABLE);\nexport const isOperator = isType(TokenType.OPERATOR);\nexport const isNamedFunction = isType(TokenType.NAMED_FUNCTION);\nexport const isLeftParenthesis = isType(TokenType.LEFT_PARENTHESIS);\nexport const isRightParenthesis = isType(TokenType.RIGHT_PARENTHESIS);\n"},"lineCount":null}},"error":null,"hash":"1beaca8c1803facadf2c8e3af3d16db3","cacheData":{"env":{}}}